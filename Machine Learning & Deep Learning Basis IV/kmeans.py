# -*- coding: utf-8 -*-
"""kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RXO5wyb02R8BtOU5OrHk6BKPtF95Jpwm
"""

import matplotlib.pyplot as plt
import numpy as np

def load_data_set():
    """
    load data
    :return:
        data_arr -- original data features
        label_arr -- original data labels
    """
    data_arr = []
    label_arr = []

    f = open('kmeans_data.txt', 'r')
    for line in f.readlines():
        line_arr = line.strip().split()
        data_arr.append([np.float(line_arr[0]), np.float(line_arr[1])])
        label_arr.append(int(line_arr[2]))
    return np.array(data_arr), np.array(label_arr)

x,label = load_data_set()
print(x.shape)
plt.scatter(x[:,0],x[:,1])

# create K clusters
clusters = []
p1 = [6,4]
p2 = [1,3]
cluster_center = np.array([p1,p2])
k = 2
for i in range(k):
    clusters.append([])

epoch = 5
for _ in range(epoch):
    for i in range(k):
        clusters[i]=[]
        
    # Calculate the distance from all points to the k cluster centers
    for i in range(x.shape[0]):
        xi = x[i]
        distances = np.sum((cluster_center-xi)**2,axis=1)
        # add the point to the cluster that is closer
        c = np.argmin(distances)
        clusters[c].append(i)

    # Recalculate the cluster centers of k clusters (all points in each cluster are added up and averaged)
    for i in range(k):
        cluster_center[i] = np.sum(x[clusters[i]],axis=0)/len(clusters[i])

plt.scatter(x[clusters[0],0],x[clusters[0],1])
plt.scatter(x[clusters[1],0],x[clusters[1],1])